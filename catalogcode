#include <iostream>
#include <vector>
#include <map>
#include <cmath>
#include <iomanip>

using namespace std;

int decodeBase(const string& value, int base) {
    int result = 0;
    int power = 1;
    for (int i = value.size() - 1; i >= 0; i--) {
        result += (value[i] - '0') * power;
        power *= base;
    }
    return result;
}

vector<double> gaussianElimination(vector<vector<double>>& A, vector<double>& B) {
    int n = A.size();
    for (int i = 0; i < n; i++) {
        int maxRow = i;
        for (int k = i + 1; k < n; k++) {
            if (abs(A[k][i]) > abs(A[maxRow][i])) {
                maxRow = k;
            }
        }
        swap(A[i], A[maxRow]);
        swap(B[i], B[maxRow]);
        for (int k = i + 1; k < n; k++) {
            double factor = A[k][i] / A[i][i];
            for (int j = i; j < n; j++) {
                A[k][j] -= factor * A[i][j];
            }
            B[k] -= factor * B[i];
        }
    }
    vector<double> X(n);
    for (int i = n - 1; i >= 0; i--) {
        X[i] = B[i];
        for (int j = i + 1; j < n; j++) {
            X[i] -= A[i][j] * X[j];
        }
        X[i] /= A[i][i];
    }
    return X;
}

int main() {
    map<int, pair<int, string>> input = {
        {1, {10, "28735619723837"}},
        {2, {16, "1A228867F0CA"}},
        {3, {12, "32811A4AA0B7B"}},
        {4, {11, "917978721331A"}},
        {5, {16, "1A22886782E1" }},
        {6, {10, "28735619654702" }},
        {7, {14, "71AB5070CC4B" }},
        {8, {9, "122662581541670" }},
        {9, {8, "642121030037605" }},
    };

    int n = input.size();
    int k = 6;
    if (n < k) {
        cout << "Error: Not enough points to solve for the polynomial coefficients." << endl;
        return 1;
    }

    vector<pair<int, int>> points;
    for (auto& pair : input) {
        int x = pair.first;
        int base = pair.second.first;
        string value = pair.second.second;
        int y = decodeBase(value, base);
        points.push_back({x, y});
    }

    vector<vector<double>> A(k, vector<double>(k));
    vector<double> B(k);
    for (int i = 0; i < k; i++) {
        for (int j = 0; j < k; j++) {
            A[i][j] = pow(points[i].first, j);
        }
        B[i] = points[i].second;
    }

    vector<double> coefficients = gaussianElimination(A, B);
    double constantTerm = coefficients[0];

    cout << "Constant term (c): " << fixed << setprecision(2) << constantTerm << endl;

    return 0;
}
